/* tslint:disable */
/* eslint-disable */
/**
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GithubComSatstreamSsApiServerApiAddressResponsesAddressResponse } from '../models';
import { GithubComSatstreamSsApiServerApiAddressResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiAddressResponsesOutputResponse } from '../models';
import { GithubComSatstreamSsApiServerApiBlockResponsesBlockCountResponse } from '../models';
import { GithubComSatstreamSsApiServerApiBlockResponsesBlockHashResponse } from '../models';
import { GithubComSatstreamSsApiServerApiBlockResponsesBlockResponse } from '../models';
import { GithubComSatstreamSsApiServerApiBlockResponsesBlocksResponse } from '../models';
import { GithubComSatstreamSsApiServerApiBlockResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiInscriptionResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse } from '../models';
import { GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse } from '../models';
import { GithubComSatstreamSsApiServerApiOutputResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiRuneResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiRuneResponsesRuneResponse } from '../models';
import { GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse } from '../models';
import { GithubComSatstreamSsApiServerApiSatoshiResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiSatoshiResponsesSatoshiResponse } from '../models';
import { GithubComSatstreamSsApiServerApiStatusResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiStatusResponsesStatusResponse } from '../models';
import { GithubComSatstreamSsApiServerApiTransactionResponsesDecodeResponse } from '../models';
import { GithubComSatstreamSsApiServerApiTransactionResponsesError } from '../models';
import { GithubComSatstreamSsApiServerApiTransactionResponsesTransactionResponse } from '../models';
import { ResponsesGetOutputByOutpointResponse } from '../models';
import { ResponsesGetOutputsResponse } from '../models';
import { ResponsesLatestBlockHashResponse } from '../models';
import { ResponsesLatestBlockHeightResponse } from '../models';
import { ResponsesLatestBlockTimeResponse } from '../models';
/**
 * InscriptionsApi - axios parameter creator
 * @export
 */
export const InscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Decodes a transaction and returns its inscriptions and runestone data
         * @summary Decode a transaction
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decodeTx: async (txid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txid' is not null or undefined
            if (txid === null || txid === undefined) {
                throw new RequiredError('txid','Required parameter txid was null or undefined when calling decodeTx.');
            }
            const localVarPath = `/decode/{txid}`
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specific child of an inscription
         * @summary Get inscription child info
         * @param {string} inscriptionId Inscription ID
         * @param {number} childIndex Child Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchInscriptionChild: async (inscriptionId: string, childIndex: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inscriptionId' is not null or undefined
            if (inscriptionId === null || inscriptionId === undefined) {
                throw new RequiredError('inscriptionId','Required parameter inscriptionId was null or undefined when calling fetchInscriptionChild.');
            }
            // verify required parameter 'childIndex' is not null or undefined
            if (childIndex === null || childIndex === undefined) {
                throw new RequiredError('childIndex','Required parameter childIndex was null or undefined when calling fetchInscriptionChild.');
            }
            const localVarPath = `/inscription/{inscription_id}/child/{child_index}`
                .replace(`{${"inscription_id"}}`, encodeURIComponent(String(inscriptionId)))
                .replace(`{${"child_index"}}`, encodeURIComponent(String(childIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about multiple inscriptions
         * @summary Fetch multiple inscriptions
         * @param {Array<string>} body Inscription IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchInscriptions: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fetchInscriptions.');
            }
            const localVarPath = `/inscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about a specific address
         * @summary Get address info
         * @param {string} address Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddress.');
            }
            const localVarPath = `/address/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve UTXOs held by a specific address with optional type filtering
         * @summary Get UTXOs for an address
         * @param {string} address Address
         * @param {string} [type] UTXO Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressUtxos: async (address: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddressUtxos.');
            }
            const localVarPath = `/address/{address}/outputs`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about a specific block by height
         * @summary Get block info by height
         * @param {string} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: async (blockHeight: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockHeight' is not null or undefined
            if (blockHeight === null || blockHeight === undefined) {
                throw new RequiredError('blockHeight','Required parameter blockHeight was null or undefined when calling getBlockByHeight.');
            }
            const localVarPath = `/block/height/{block_height}`
                .replace(`{${"block_height"}}`, encodeURIComponent(String(blockHeight)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the height of the latest block
         * @summary Get the height of the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blockcount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns blockhash of specified block.
         * @summary Returns blockhash of specified block.
         * @param {string} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockHashByHeight: async (blockHeight: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockHeight' is not null or undefined
            if (blockHeight === null || blockHeight === undefined) {
                throw new RequiredError('blockHeight','Required parameter blockHeight was null or undefined when calling getBlockHashByHeight.');
            }
            const localVarPath = `/blockhash/{block_height}`
                .replace(`{${"block_height"}}`, encodeURIComponent(String(blockHeight)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all inscriptions in a specific block
         * @summary Get inscriptions in a specific block
         * @param {number} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockInscriptions: async (blockHeight: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockHeight' is not null or undefined
            if (blockHeight === null || blockHeight === undefined) {
                throw new RequiredError('blockHeight','Required parameter blockHeight was null or undefined when calling getBlockInscriptions.');
            }
            const localVarPath = `/inscriptions/block/{block_height}`
                .replace(`{${"block_height"}}`, encodeURIComponent(String(blockHeight)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the latest block height, last 100 block hashes, and featured inscriptions
         * @summary Returns the latest block height, last 100 block hashes, and featured inscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific inscription
         * @summary Get inscription info
         * @param {string} inscriptionId Inscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInscription: async (inscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inscriptionId' is not null or undefined
            if (inscriptionId === null || inscriptionId === undefined) {
                throw new RequiredError('inscriptionId','Required parameter inscriptionId was null or undefined when calling getInscription.');
            }
            const localVarPath = `/inscription/{inscription_id}`
                .replace(`{${"inscription_id"}}`, encodeURIComponent(String(inscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the height of the latest block.
         * @summary Returns the height of the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlockHeight: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/latestblockheight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns blockhash for the latest block.
         * @summary Returns blockhash for the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlockhash: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/latestblockhash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the UNIX timestamp of when the latest block was mined
         * @summary Get the timestamp of the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlocktime: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blocktime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the latest 100 inscriptions (first page)
         * @summary Get latest inscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestInscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inscriptions/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific page of 100 inscriptions
         * @summary Get latest inscriptions page
         * @param {number} page Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestInscriptionsPage: async (page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getLatestInscriptionsPage.');
            }
            const localVarPath = `/inscriptions/page/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about the last 100 inscribed runes (first page)
         * @summary Get latest runes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestRunes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/runes/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific page of 100 inscribed runes
         * @summary Get latest runes page
         * @param {number} page Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestRunesPage: async (page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getLatestRunesPage.');
            }
            const localVarPath = `/runes/page/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specific UTXO using outpoint string
         * @summary Get output info by outpoint
         * @param {string} outpoint Outpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutputByOutpoint: async (outpoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'outpoint' is not null or undefined
            if (outpoint === null || outpoint === undefined) {
                throw new RequiredError('outpoint','Required parameter outpoint was null or undefined when calling getOutputByOutpoint.');
            }
            const localVarPath = `/output/outpoint/{outpoint}`
                .replace(`{${"outpoint"}}`, encodeURIComponent(String(outpoint)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about multiple UTXOs
         * @summary Get multiple outputs
         * @param {Array<string>} body Outpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutputs: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getOutputs.');
            }
            const localVarPath = `/outputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specific rune
         * @summary Get rune info
         * @param {string} runeName Rune Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRune: async (runeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runeName' is not null or undefined
            if (runeName === null || runeName === undefined) {
                throw new RequiredError('runeName','Required parameter runeName was null or undefined when calling getRune.');
            }
            const localVarPath = `/rune/{rune_name}`
                .replace(`{${"rune_name"}}`, encodeURIComponent(String(runeName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specific satoshi
         * @summary Get satoshi info
         * @param {number} number Satoshi Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSatoshi: async (number: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            if (number === null || number === undefined) {
                throw new RequiredError('number','Required parameter number was null or undefined when calling getSatoshi.');
            }
            const localVarPath = `/sat/{number}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about the server installation and index
         * @summary Get server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a specific transaction
         * @summary Get transaction info
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (txid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txid' is not null or undefined
            if (txid === null || txid === undefined) {
                throw new RequiredError('txid','Required parameter txid was null or undefined when calling getTransaction.');
            }
            const localVarPath = `/tx/{txid}`
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InscriptionsApi - functional programming interface
 * @export
 */
export const InscriptionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Decodes a transaction and returns its inscriptions and runestone data
         * @summary Decode a transaction
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decodeTx(txid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiTransactionResponsesDecodeResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).decodeTx(txid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about a specific child of an inscription
         * @summary Get inscription child info
         * @param {string} inscriptionId Inscription ID
         * @param {number} childIndex Child Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchInscriptionChild(inscriptionId: string, childIndex: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).fetchInscriptionChild(inscriptionId, childIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about multiple inscriptions
         * @summary Fetch multiple inscriptions
         * @param {Array<string>} body Inscription IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchInscriptions(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).fetchInscriptions(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get detailed information about a specific address
         * @summary Get address info
         * @param {string} address Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddress(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiAddressResponsesAddressResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getAddress(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve UTXOs held by a specific address with optional type filtering
         * @summary Get UTXOs for an address
         * @param {string} address Address
         * @param {string} [type] UTXO Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressUtxos(address: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GithubComSatstreamSsApiServerApiAddressResponsesOutputResponse>>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getAddressUtxos(address, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get detailed information about a specific block by height
         * @summary Get block info by height
         * @param {string} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockByHeight(blockHeight: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getBlockByHeight(blockHeight, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the height of the latest block
         * @summary Get the height of the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockCountResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getBlockCount(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns blockhash of specified block.
         * @summary Returns blockhash of specified block.
         * @param {string} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockHashByHeight(blockHeight: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockHashResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getBlockHashByHeight(blockHeight, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve all inscriptions in a specific block
         * @summary Get inscriptions in a specific block
         * @param {number} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockInscriptions(blockHeight: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getBlockInscriptions(blockHeight, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the latest block height, last 100 block hashes, and featured inscriptions
         * @summary Returns the latest block height, last 100 block hashes, and featured inscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlocks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlocksResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getBlocks(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific inscription
         * @summary Get inscription info
         * @param {string} inscriptionId Inscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInscription(inscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getInscription(inscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the height of the latest block.
         * @summary Returns the height of the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlockHeight(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesLatestBlockHeightResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestBlockHeight(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns blockhash for the latest block.
         * @summary Returns blockhash for the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlockhash(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesLatestBlockHashResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestBlockhash(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the UNIX timestamp of when the latest block was mined
         * @summary Get the timestamp of the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlocktime(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesLatestBlockTimeResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestBlocktime(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve the latest 100 inscriptions (first page)
         * @summary Get latest inscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestInscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestInscriptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a specific page of 100 inscriptions
         * @summary Get latest inscriptions page
         * @param {number} page Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestInscriptionsPage(page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestInscriptionsPage(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about the last 100 inscribed runes (first page)
         * @summary Get latest runes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestRunes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestRunes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a specific page of 100 inscribed runes
         * @summary Get latest runes page
         * @param {number} page Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestRunesPage(page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getLatestRunesPage(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about a specific UTXO using outpoint string
         * @summary Get output info by outpoint
         * @param {string} outpoint Outpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutputByOutpoint(outpoint: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetOutputByOutpointResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getOutputByOutpoint(outpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about multiple UTXOs
         * @summary Get multiple outputs
         * @param {Array<string>} body Outpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutputs(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ResponsesGetOutputsResponse>>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getOutputs(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about a specific rune
         * @summary Get rune info
         * @param {string} runeName Rune Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRune(runeName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRuneResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getRune(runeName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about a specific satoshi
         * @summary Get satoshi info
         * @param {number} number Satoshi Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSatoshi(number: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiSatoshiResponsesSatoshiResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getSatoshi(number, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about the server installation and index
         * @summary Get server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiStatusResponsesStatusResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getStatus(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve information about a specific transaction
         * @summary Get transaction info
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(txid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComSatstreamSsApiServerApiTransactionResponsesTransactionResponse>>> {
            const localVarAxiosArgs = await InscriptionsApiAxiosParamCreator(configuration).getTransaction(txid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InscriptionsApi - factory interface
 * @export
 */
export const InscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Decodes a transaction and returns its inscriptions and runestone data
         * @summary Decode a transaction
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decodeTx(txid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiTransactionResponsesDecodeResponse>> {
            return InscriptionsApiFp(configuration).decodeTx(txid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specific child of an inscription
         * @summary Get inscription child info
         * @param {string} inscriptionId Inscription ID
         * @param {number} childIndex Child Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchInscriptionChild(inscriptionId: string, childIndex: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>> {
            return InscriptionsApiFp(configuration).fetchInscriptionChild(inscriptionId, childIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about multiple inscriptions
         * @summary Fetch multiple inscriptions
         * @param {Array<string>} body Inscription IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchInscriptions(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>>> {
            return InscriptionsApiFp(configuration).fetchInscriptions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about a specific address
         * @summary Get address info
         * @param {string} address Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddress(address: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiAddressResponsesAddressResponse>> {
            return InscriptionsApiFp(configuration).getAddress(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve UTXOs held by a specific address with optional type filtering
         * @summary Get UTXOs for an address
         * @param {string} address Address
         * @param {string} [type] UTXO Type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressUtxos(address: string, type?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GithubComSatstreamSsApiServerApiAddressResponsesOutputResponse>>> {
            return InscriptionsApiFp(configuration).getAddressUtxos(address, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about a specific block by height
         * @summary Get block info by height
         * @param {string} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockByHeight(blockHeight: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockResponse>> {
            return InscriptionsApiFp(configuration).getBlockByHeight(blockHeight, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the height of the latest block
         * @summary Get the height of the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockCount(options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockCountResponse>> {
            return InscriptionsApiFp(configuration).getBlockCount(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns blockhash of specified block.
         * @summary Returns blockhash of specified block.
         * @param {string} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockHashByHeight(blockHeight: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockHashResponse>> {
            return InscriptionsApiFp(configuration).getBlockHashByHeight(blockHeight, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all inscriptions in a specific block
         * @summary Get inscriptions in a specific block
         * @param {number} blockHeight Block Height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockInscriptions(blockHeight: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>> {
            return InscriptionsApiFp(configuration).getBlockInscriptions(blockHeight, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the latest block height, last 100 block hashes, and featured inscriptions
         * @summary Returns the latest block height, last 100 block hashes, and featured inscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlocks(options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlocksResponse>> {
            return InscriptionsApiFp(configuration).getBlocks(options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific inscription
         * @summary Get inscription info
         * @param {string} inscriptionId Inscription ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInscription(inscriptionId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>> {
            return InscriptionsApiFp(configuration).getInscription(inscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the height of the latest block.
         * @summary Returns the height of the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlockHeight(options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesLatestBlockHeightResponse>> {
            return InscriptionsApiFp(configuration).getLatestBlockHeight(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns blockhash for the latest block.
         * @summary Returns blockhash for the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlockhash(options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesLatestBlockHashResponse>> {
            return InscriptionsApiFp(configuration).getLatestBlockhash(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the UNIX timestamp of when the latest block was mined
         * @summary Get the timestamp of the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlocktime(options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesLatestBlockTimeResponse>> {
            return InscriptionsApiFp(configuration).getLatestBlocktime(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the latest 100 inscriptions (first page)
         * @summary Get latest inscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestInscriptions(options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>> {
            return InscriptionsApiFp(configuration).getLatestInscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific page of 100 inscriptions
         * @summary Get latest inscriptions page
         * @param {number} page Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestInscriptionsPage(page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>> {
            return InscriptionsApiFp(configuration).getLatestInscriptionsPage(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about the last 100 inscribed runes (first page)
         * @summary Get latest runes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestRunes(options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse>> {
            return InscriptionsApiFp(configuration).getLatestRunes(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific page of 100 inscribed runes
         * @summary Get latest runes page
         * @param {number} page Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestRunesPage(page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse>> {
            return InscriptionsApiFp(configuration).getLatestRunesPage(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specific UTXO using outpoint string
         * @summary Get output info by outpoint
         * @param {string} outpoint Outpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutputByOutpoint(outpoint: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetOutputByOutpointResponse>> {
            return InscriptionsApiFp(configuration).getOutputByOutpoint(outpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about multiple UTXOs
         * @summary Get multiple outputs
         * @param {Array<string>} body Outpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutputs(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ResponsesGetOutputsResponse>>> {
            return InscriptionsApiFp(configuration).getOutputs(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specific rune
         * @summary Get rune info
         * @param {string} runeName Rune Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRune(runeName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRuneResponse>> {
            return InscriptionsApiFp(configuration).getRune(runeName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specific satoshi
         * @summary Get satoshi info
         * @param {number} number Satoshi Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSatoshi(number: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiSatoshiResponsesSatoshiResponse>> {
            return InscriptionsApiFp(configuration).getSatoshi(number, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about the server installation and index
         * @summary Get server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiStatusResponsesStatusResponse>> {
            return InscriptionsApiFp(configuration).getStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information about a specific transaction
         * @summary Get transaction info
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(txid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComSatstreamSsApiServerApiTransactionResponsesTransactionResponse>> {
            return InscriptionsApiFp(configuration).getTransaction(txid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InscriptionsApi - object-oriented interface
 * @export
 * @class InscriptionsApi
 * @extends {BaseAPI}
 */
export class InscriptionsApi extends BaseAPI {
    /**
     * Decodes a transaction and returns its inscriptions and runestone data
     * @summary Decode a transaction
     * @param {string} txid Transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async decodeTx(txid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiTransactionResponsesDecodeResponse>> {
        return InscriptionsApiFp(this.configuration).decodeTx(txid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about a specific child of an inscription
     * @summary Get inscription child info
     * @param {string} inscriptionId Inscription ID
     * @param {number} childIndex Child Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async fetchInscriptionChild(inscriptionId: string, childIndex: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>> {
        return InscriptionsApiFp(this.configuration).fetchInscriptionChild(inscriptionId, childIndex, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about multiple inscriptions
     * @summary Fetch multiple inscriptions
     * @param {Array<string>} body Inscription IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async fetchInscriptions(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>>> {
        return InscriptionsApiFp(this.configuration).fetchInscriptions(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get detailed information about a specific address
     * @summary Get address info
     * @param {string} address Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getAddress(address: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiAddressResponsesAddressResponse>> {
        return InscriptionsApiFp(this.configuration).getAddress(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve UTXOs held by a specific address with optional type filtering
     * @summary Get UTXOs for an address
     * @param {string} address Address
     * @param {string} [type] UTXO Type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getAddressUtxos(address: string, type?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GithubComSatstreamSsApiServerApiAddressResponsesOutputResponse>>> {
        return InscriptionsApiFp(this.configuration).getAddressUtxos(address, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get detailed information about a specific block by height
     * @summary Get block info by height
     * @param {string} blockHeight Block Height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getBlockByHeight(blockHeight: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockResponse>> {
        return InscriptionsApiFp(this.configuration).getBlockByHeight(blockHeight, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the height of the latest block
     * @summary Get the height of the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getBlockCount(options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockCountResponse>> {
        return InscriptionsApiFp(this.configuration).getBlockCount(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns blockhash of specified block.
     * @summary Returns blockhash of specified block.
     * @param {string} blockHeight Block Height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getBlockHashByHeight(blockHeight: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlockHashResponse>> {
        return InscriptionsApiFp(this.configuration).getBlockHashByHeight(blockHeight, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve all inscriptions in a specific block
     * @summary Get inscriptions in a specific block
     * @param {number} blockHeight Block Height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getBlockInscriptions(blockHeight: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>> {
        return InscriptionsApiFp(this.configuration).getBlockInscriptions(blockHeight, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the latest block height, last 100 block hashes, and featured inscriptions
     * @summary Returns the latest block height, last 100 block hashes, and featured inscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getBlocks(options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiBlockResponsesBlocksResponse>> {
        return InscriptionsApiFp(this.configuration).getBlocks(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific inscription
     * @summary Get inscription info
     * @param {string} inscriptionId Inscription ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getInscription(inscriptionId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesInscriptionResponse>> {
        return InscriptionsApiFp(this.configuration).getInscription(inscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the height of the latest block.
     * @summary Returns the height of the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestBlockHeight(options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesLatestBlockHeightResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestBlockHeight(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns blockhash for the latest block.
     * @summary Returns blockhash for the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestBlockhash(options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesLatestBlockHashResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestBlockhash(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the UNIX timestamp of when the latest block was mined
     * @summary Get the timestamp of the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestBlocktime(options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesLatestBlockTimeResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestBlocktime(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the latest 100 inscriptions (first page)
     * @summary Get latest inscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestInscriptions(options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestInscriptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a specific page of 100 inscriptions
     * @summary Get latest inscriptions page
     * @param {number} page Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestInscriptionsPage(page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiInscriptionResponsesLatestInscriptionsResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestInscriptionsPage(page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about the last 100 inscribed runes (first page)
     * @summary Get latest runes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestRunes(options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestRunes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a specific page of 100 inscribed runes
     * @summary Get latest runes page
     * @param {number} page Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getLatestRunesPage(page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRunesListResponse>> {
        return InscriptionsApiFp(this.configuration).getLatestRunesPage(page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about a specific UTXO using outpoint string
     * @summary Get output info by outpoint
     * @param {string} outpoint Outpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getOutputByOutpoint(outpoint: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetOutputByOutpointResponse>> {
        return InscriptionsApiFp(this.configuration).getOutputByOutpoint(outpoint, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about multiple UTXOs
     * @summary Get multiple outputs
     * @param {Array<string>} body Outpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getOutputs(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ResponsesGetOutputsResponse>>> {
        return InscriptionsApiFp(this.configuration).getOutputs(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about a specific rune
     * @summary Get rune info
     * @param {string} runeName Rune Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getRune(runeName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiRuneResponsesRuneResponse>> {
        return InscriptionsApiFp(this.configuration).getRune(runeName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about a specific satoshi
     * @summary Get satoshi info
     * @param {number} number Satoshi Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getSatoshi(number: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiSatoshiResponsesSatoshiResponse>> {
        return InscriptionsApiFp(this.configuration).getSatoshi(number, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about the server installation and index
     * @summary Get server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getStatus(options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiStatusResponsesStatusResponse>> {
        return InscriptionsApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve information about a specific transaction
     * @summary Get transaction info
     * @param {string} txid Transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InscriptionsApi
     */
    public async getTransaction(txid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComSatstreamSsApiServerApiTransactionResponsesTransactionResponse>> {
        return InscriptionsApiFp(this.configuration).getTransaction(txid, options).then((request) => request(this.axios, this.basePath));
    }
}
