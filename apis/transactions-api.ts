/* tslint:disable */
/* eslint-disable */
/**
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GithubComSatstreamSsApiServerApiTransactionsResponsesError } from '../models';
import { ResponsesGetTransaction } from '../models';
import { ResponsesGetTxInfo } from '../models';
import { ResponsesSendRawTransaction } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Broadcast a raw transaction to the Bitcoin network
         * @summary Broadcast transaction
         * @param {string} body Raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTransaction: async (body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling broadcastTransaction.');
            }
            const localVarPath = `/transactions/broadcast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a transaction by its hash
         * @summary Get transaction
         * @param {string} hash Transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError('hash','Required parameter hash was null or undefined when calling getTransaction.');
            }
            const localVarPath = `/indexer/tx/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about a specific transaction
         * @summary Get transaction info
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionInfo: async (txid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'txid' is not null or undefined
            if (txid === null || txid === undefined) {
                throw new RequiredError('txid','Required parameter txid was null or undefined when calling getTransactionInfo.');
            }
            const localVarPath = `/transactions/{txid}`
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Broadcast a raw transaction to the Bitcoin network
         * @summary Broadcast transaction
         * @param {string} body Raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async broadcastTransaction(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesSendRawTransaction>>> {
            const localVarAxiosArgs = await TransactionsApiAxiosParamCreator(configuration).broadcastTransaction(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a transaction by its hash
         * @summary Get transaction
         * @param {string} hash Transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(hash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetTransaction>>> {
            const localVarAxiosArgs = await TransactionsApiAxiosParamCreator(configuration).getTransaction(hash, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get detailed information about a specific transaction
         * @summary Get transaction info
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionInfo(txid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetTxInfo>>> {
            const localVarAxiosArgs = await TransactionsApiAxiosParamCreator(configuration).getTransactionInfo(txid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Broadcast a raw transaction to the Bitcoin network
         * @summary Broadcast transaction
         * @param {string} body Raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async broadcastTransaction(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesSendRawTransaction>> {
            return TransactionsApiFp(configuration).broadcastTransaction(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a transaction by its hash
         * @summary Get transaction
         * @param {string} hash Transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(hash: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetTransaction>> {
            return TransactionsApiFp(configuration).getTransaction(hash, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about a specific transaction
         * @summary Get transaction info
         * @param {string} txid Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionInfo(txid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetTxInfo>> {
            return TransactionsApiFp(configuration).getTransactionInfo(txid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Broadcast a raw transaction to the Bitcoin network
     * @summary Broadcast transaction
     * @param {string} body Raw transaction hex
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public async broadcastTransaction(body: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesSendRawTransaction>> {
        return TransactionsApiFp(this.configuration).broadcastTransaction(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a transaction by its hash
     * @summary Get transaction
     * @param {string} hash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public async getTransaction(hash: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetTransaction>> {
        return TransactionsApiFp(this.configuration).getTransaction(hash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get detailed information about a specific transaction
     * @summary Get transaction info
     * @param {string} txid Transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public async getTransactionInfo(txid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetTxInfo>> {
        return TransactionsApiFp(this.configuration).getTransactionInfo(txid, options).then((request) => request(this.axios, this.basePath));
    }
}
