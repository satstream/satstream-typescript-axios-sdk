/* tslint:disable */
/* eslint-disable */
/**
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GithubComSatstreamSsApiServerApiAddressesResponsesError } from '../models';
import { ResponsesGetAddressBalance } from '../models';
import { ResponsesGetAddressNonInscriptionUTXO } from '../models';
import { ResponsesGetAddressRuneBalance } from '../models';
import { ResponsesGetAddressRunesBalanceList } from '../models';
import { ResponsesGetAddressTimeframeBalance } from '../models';
/**
 * AddressesApi - axios parameter creator
 * @export
 */
export const AddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the current balance of a Bitcoin address
         * @summary Get address balance
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressBalance: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddressBalance.');
            }
            const localVarPath = `/addresses/{address}/balance`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all non-inscription UTXOs for a Bitcoin address
         * @summary Get address non-inscription UTXOs
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressNonInscriptionUtxos: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddressNonInscriptionUtxos.');
            }
            const localVarPath = `/addresses/{address}/utxos`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the balance of a specific rune for a Bitcoin address
         * @summary Get address rune balance
         * @param {string} address Bitcoin address
         * @param {string} runeid Rune ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressRuneBalance: async (address: string, runeid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddressRuneBalance.');
            }
            // verify required parameter 'runeid' is not null or undefined
            if (runeid === null || runeid === undefined) {
                throw new RequiredError('runeid','Required parameter runeid was null or undefined when calling getAddressRuneBalance.');
            }
            const localVarPath = `/addresses/{address}/runes/{runeid}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"runeid"}}`, encodeURIComponent(String(runeid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the balance of all runes for a Bitcoin address
         * @summary Get address runes balance list
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressRunesBalanceList: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddressRunesBalanceList.');
            }
            const localVarPath = `/addresses/{address}/runes`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the balance of a Bitcoin address for a specific timeframe
         * @summary Get address timeframe balance
         * @param {string} address Bitcoin address
         * @param {string} timeframe Timeframe
         * @param {string} [token] Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressTimeframeBalance: async (address: string, timeframe: string, token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getAddressTimeframeBalance.');
            }
            // verify required parameter 'timeframe' is not null or undefined
            if (timeframe === null || timeframe === undefined) {
                throw new RequiredError('timeframe','Required parameter timeframe was null or undefined when calling getAddressTimeframeBalance.');
            }
            const localVarPath = `/addresses/{address}/balance/timeframe`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-KEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (timeframe !== undefined) {
                localVarQueryParameter['timeframe'] = timeframe;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesApi - functional programming interface
 * @export
 */
export const AddressesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the current balance of a Bitcoin address
         * @summary Get address balance
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressBalance(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetAddressBalance>>> {
            const localVarAxiosArgs = await AddressesApiAxiosParamCreator(configuration).getAddressBalance(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all non-inscription UTXOs for a Bitcoin address
         * @summary Get address non-inscription UTXOs
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressNonInscriptionUtxos(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetAddressNonInscriptionUTXO>>> {
            const localVarAxiosArgs = await AddressesApiAxiosParamCreator(configuration).getAddressNonInscriptionUtxos(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the balance of a specific rune for a Bitcoin address
         * @summary Get address rune balance
         * @param {string} address Bitcoin address
         * @param {string} runeid Rune ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressRuneBalance(address: string, runeid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetAddressRuneBalance>>> {
            const localVarAxiosArgs = await AddressesApiAxiosParamCreator(configuration).getAddressRuneBalance(address, runeid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the balance of all runes for a Bitcoin address
         * @summary Get address runes balance list
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressRunesBalanceList(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetAddressRunesBalanceList>>> {
            const localVarAxiosArgs = await AddressesApiAxiosParamCreator(configuration).getAddressRunesBalanceList(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the balance of a Bitcoin address for a specific timeframe
         * @summary Get address timeframe balance
         * @param {string} address Bitcoin address
         * @param {string} timeframe Timeframe
         * @param {string} [token] Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressTimeframeBalance(address: string, timeframe: string, token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResponsesGetAddressTimeframeBalance>>> {
            const localVarAxiosArgs = await AddressesApiAxiosParamCreator(configuration).getAddressTimeframeBalance(address, timeframe, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AddressesApi - factory interface
 * @export
 */
export const AddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the current balance of a Bitcoin address
         * @summary Get address balance
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressBalance(address: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetAddressBalance>> {
            return AddressesApiFp(configuration).getAddressBalance(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all non-inscription UTXOs for a Bitcoin address
         * @summary Get address non-inscription UTXOs
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressNonInscriptionUtxos(address: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetAddressNonInscriptionUTXO>> {
            return AddressesApiFp(configuration).getAddressNonInscriptionUtxos(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the balance of a specific rune for a Bitcoin address
         * @summary Get address rune balance
         * @param {string} address Bitcoin address
         * @param {string} runeid Rune ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressRuneBalance(address: string, runeid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetAddressRuneBalance>> {
            return AddressesApiFp(configuration).getAddressRuneBalance(address, runeid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the balance of all runes for a Bitcoin address
         * @summary Get address runes balance list
         * @param {string} address Bitcoin address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressRunesBalanceList(address: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetAddressRunesBalanceList>> {
            return AddressesApiFp(configuration).getAddressRunesBalanceList(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the balance of a Bitcoin address for a specific timeframe
         * @summary Get address timeframe balance
         * @param {string} address Bitcoin address
         * @param {string} timeframe Timeframe
         * @param {string} [token] Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressTimeframeBalance(address: string, timeframe: string, token?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ResponsesGetAddressTimeframeBalance>> {
            return AddressesApiFp(configuration).getAddressTimeframeBalance(address, timeframe, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export class AddressesApi extends BaseAPI {
    /**
     * Get the current balance of a Bitcoin address
     * @summary Get address balance
     * @param {string} address Bitcoin address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public async getAddressBalance(address: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetAddressBalance>> {
        return AddressesApiFp(this.configuration).getAddressBalance(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all non-inscription UTXOs for a Bitcoin address
     * @summary Get address non-inscription UTXOs
     * @param {string} address Bitcoin address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public async getAddressNonInscriptionUtxos(address: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetAddressNonInscriptionUTXO>> {
        return AddressesApiFp(this.configuration).getAddressNonInscriptionUtxos(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the balance of a specific rune for a Bitcoin address
     * @summary Get address rune balance
     * @param {string} address Bitcoin address
     * @param {string} runeid Rune ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public async getAddressRuneBalance(address: string, runeid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetAddressRuneBalance>> {
        return AddressesApiFp(this.configuration).getAddressRuneBalance(address, runeid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the balance of all runes for a Bitcoin address
     * @summary Get address runes balance list
     * @param {string} address Bitcoin address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public async getAddressRunesBalanceList(address: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetAddressRunesBalanceList>> {
        return AddressesApiFp(this.configuration).getAddressRunesBalanceList(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the balance of a Bitcoin address for a specific timeframe
     * @summary Get address timeframe balance
     * @param {string} address Bitcoin address
     * @param {string} timeframe Timeframe
     * @param {string} [token] Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public async getAddressTimeframeBalance(address: string, timeframe: string, token?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResponsesGetAddressTimeframeBalance>> {
        return AddressesApiFp(this.configuration).getAddressTimeframeBalance(address, timeframe, token, options).then((request) => request(this.axios, this.basePath));
    }
}
